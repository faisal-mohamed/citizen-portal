# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Post @model {
  id: ID!
  title: String!
  s3Url: [String!]!
  thumbnailUrl: String!
  description: String!
  tags: [String!]
  category: Category @hasOne
  comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  likes: [Likes] @hasMany
  postedBy: User @hasOne
  enquiry: [Enquiry] @hasMany
  savedPost: [SavedPost] @hasMany
  likesCount: Int! @default(value: "0")
  commentsCount: Int! @default(value: "0")
  sortByDate: String!
    @index(
      name: "postsByDate"
      queryField: "postsByDate"
      sortKeyFields: ["createdAt"]
    )
  trending: String!
    @index(
      name: "postsByLikes"
      queryField: "postsByLikes"
      sortKeyFields: ["likesCount"]
    )
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type movedDraftPosts @model {
  id: ID!
  title: String!
  s3Url: [String!]!
  thumbnailUrl: String!
  description: String!
  tags: [String!]
  category: Category @hasOne
  comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  likes: [Likes] @hasMany
  postedBy: User @hasOne
  likesCount: Int! @default(value: "0")
  commentsCount: Int! @default(value: "0")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
type Comment @model {
  id: ID!
  postID: ID! @index(name: "byPost", sortKeyFields: ["createdAt"])
  post: Post! @hasOne
  content: String!
  commentedBy: User! @hasOne
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Likes @model {
  id: ID!
  sortByDate: String!
    @index(
      name: "likesByDate"
      queryField: "likesByDate"
      sortKeyFields: ["createdAt"]
    )
  post: Post! @belongsTo
  postedBy: User! @hasOne
  Liked: Boolean! @default(value: "false")
  LikedBy: User! @hasOne
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User @model {
  id: ID!
  firstName: String!
  lastName: String
  email: AWSEmail!
  phone: String
  cognitoId: String!
  image: String
  city: String
  country: String
  website: String
  company: String
  jobTitle: String
  experience: Int @default(value: "0")
  role: String!
  bio: String
  likedPosts: [Likes] @hasMany
  savedPosts: [Post] @hasMany
  commentedPosts: [Comment] @hasMany
  socialMediaProfiles: String
  followingCount: Int @default(value: "0")
  followersCount: Int @default(value: "0")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
type Enquiry @model {
  id: ID!
  message: String!
  enquiredById: User! @hasOne
  postId: Post! @belongsTo
  hireInterest: Boolean @default(value: "false")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type SavedPost @model {
  id: ID!
  savedBy: User! @hasOne
  post: Post! @belongsTo
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Follow @model {
  id: ID!
  followedBy: User! @hasOne
  following: User! @hasOne
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
type Category @model {
  id: ID!
  name: String!
  image: String
  description: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type PostDrafts @model {
  id: ID!
  title: String!
  s3Url: [String]
  thumbnailUrl: String!
  description: String
  tags: [String!]
  category: Category! @hasOne
  createBy: User! @hasOne
  sortByDate: String!
    @index(
      name: "savedByDate"
      queryField: "savedByDate"
      sortKeyFields: ["updatedAt"]
    )
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Query {
  listTrendingPosts(limit: Int, nextToken: String): PaginatedLikes
    @function(name: "designersListTrendingPosts-${env}")
  checkUserLikedSavedPosts(userId: String!, idArray: [String!]! searchMode: searchMode!): userSavedLiked
    @function(name: "checkUserLikedSavedPosts-${env}")
}

type PaginatedLikes {
  items: [Likes]!
  nextToken: String
}

type userSavedLiked {
  items: [userSavedLikedObject]
}

type userSavedLikedObject {
  postId: ID
  LikeId: ID
  SaveId: ID
}

enum searchMode {
  like
  save
  both
}