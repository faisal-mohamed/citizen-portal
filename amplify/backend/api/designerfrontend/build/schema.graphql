type Post {
  id: ID!
  title: String!
  s3Url: [String!]!
  thumbnailUrl: String!
  description: String!
  tags: [String!]
  category: Category
  comments(createdAt: ModelStringKeyConditionInput, filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  likes(filter: ModelLikesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelLikesConnection
  postedBy: User
  enquiry(filter: ModelEnquiryFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelEnquiryConnection
  savedPost(filter: ModelSavedPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSavedPostConnection
  likesCount: Int!
  commentsCount: Int!
  sortByDate: String!
  trending: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userSavedPostsId: ID
  postCategoryId: ID
  postPostedById: ID
}

type movedDraftPosts {
  id: ID!
  title: String!
  s3Url: [String!]!
  thumbnailUrl: String!
  description: String!
  tags: [String!]
  category: Category
  comments(createdAt: ModelStringKeyConditionInput, filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  likes(filter: ModelLikesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelLikesConnection
  postedBy: User
  likesCount: Int!
  commentsCount: Int!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  movedDraftPostsCategoryId: ID
  movedDraftPostsPostedById: ID
}

type Comment {
  id: ID!
  postID: ID!
  post: Post!
  content: String!
  commentedBy: User!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userCommentedPostsId: ID
  commentPostId: ID!
  commentCommentedById: ID!
}

type Likes {
  id: ID!
  sortByDate: String!
  post: Post!
  postedBy: User!
  Liked: Boolean!
  LikedBy: User!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postLikesId: ID
  movedDraftPostsLikesId: ID
  userLikedPostsId: ID
  likesPostedById: ID!
  likesLikedById: ID!
}

type User {
  id: ID!
  firstName: String!
  lastName: String
  email: AWSEmail!
  phone: String
  cognitoId: String!
  image: String
  city: String
  country: String
  website: String
  company: String
  jobTitle: String
  experience: Int
  role: String!
  bio: String
  likedPosts(filter: ModelLikesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelLikesConnection
  savedPosts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
  commentedPosts(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  socialMediaProfiles: String
  followingCount: Int
  followersCount: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Enquiry {
  id: ID!
  message: String!
  enquiredById: User!
  postId: Post!
  hireInterest: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postEnquiryId: ID
  enquiryEnquiredByIdId: ID!
}

type SavedPost {
  id: ID!
  savedBy: User!
  post: Post!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postSavedPostId: ID
  savedPostSavedById: ID!
}

type Follow {
  id: ID!
  followedBy: User!
  following: User!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  followFollowedById: ID!
  followFollowingId: ID!
}

type Category {
  id: ID!
  name: String!
  image: String
  description: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type PostDrafts {
  id: ID!
  title: String!
  s3Url: [String]
  thumbnailUrl: String!
  description: String
  tags: [String!]
  category: Category!
  createBy: User!
  sortByDate: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postDraftsCategoryId: ID!
  postDraftsCreateById: ID!
}

type Query {
  listTrendingPosts(limit: Int, nextToken: String): PaginatedLikes
  checkUserLikedSavedPosts(userId: String!, idArray: [String!]!, searchMode: searchMode!): userSavedLiked
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getMovedDraftPosts(id: ID!): movedDraftPosts
  listMovedDraftPosts(filter: ModelMovedDraftPostsFilterInput, limit: Int, nextToken: String): ModelMovedDraftPostsConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getLikes(id: ID!): Likes
  listLikes(filter: ModelLikesFilterInput, limit: Int, nextToken: String): ModelLikesConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getEnquiry(id: ID!): Enquiry
  listEnquiries(filter: ModelEnquiryFilterInput, limit: Int, nextToken: String): ModelEnquiryConnection
  getSavedPost(id: ID!): SavedPost
  listSavedPosts(filter: ModelSavedPostFilterInput, limit: Int, nextToken: String): ModelSavedPostConnection
  getFollow(id: ID!): Follow
  listFollows(filter: ModelFollowFilterInput, limit: Int, nextToken: String): ModelFollowConnection
  getCategory(id: ID!): Category
  listCategories(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection
  getPostDrafts(id: ID!): PostDrafts
  listPostDrafts(filter: ModelPostDraftsFilterInput, limit: Int, nextToken: String): ModelPostDraftsConnection
  postsByDate(sortByDate: String!, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  postsByLikes(trending: String!, likesCount: ModelIntKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  commentsByPostIDAndCreatedAt(postID: ID!, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  likesByDate(sortByDate: String!, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelLikesFilterInput, limit: Int, nextToken: String): ModelLikesConnection
  savedByDate(sortByDate: String!, updatedAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostDraftsFilterInput, limit: Int, nextToken: String): ModelPostDraftsConnection
}

type PaginatedLikes {
  items: [Likes]!
  nextToken: String
}

type userSavedLiked {
  items: [userSavedLikedObject]
}

type userSavedLikedObject {
  postId: ID
  LikeId: ID
  SaveId: ID
}

enum searchMode {
  like
  save
  both
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  s3Url: ModelStringInput
  thumbnailUrl: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  likesCount: ModelIntInput
  commentsCount: ModelIntInput
  sortByDate: ModelStringInput
  trending: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  userSavedPostsId: ModelIDInput
  postCategoryId: ModelIDInput
  postPostedById: ModelIDInput
}

input ModelPostConditionInput {
  title: ModelStringInput
  s3Url: ModelStringInput
  thumbnailUrl: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  likesCount: ModelIntInput
  commentsCount: ModelIntInput
  sortByDate: ModelStringInput
  trending: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  userSavedPostsId: ModelIDInput
  postCategoryId: ModelIDInput
  postPostedById: ModelIDInput
}

input CreatePostInput {
  id: ID
  title: String!
  s3Url: [String!]!
  thumbnailUrl: String!
  description: String!
  tags: [String!]
  likesCount: Int!
  commentsCount: Int!
  sortByDate: String!
  trending: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userSavedPostsId: ID
  postCategoryId: ID
  postPostedById: ID
}

input UpdatePostInput {
  id: ID!
  title: String
  s3Url: [String!]
  thumbnailUrl: String
  description: String
  tags: [String!]
  likesCount: Int
  commentsCount: Int
  sortByDate: String
  trending: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userSavedPostsId: ID
  postCategoryId: ID
  postPostedById: ID
}

input DeletePostInput {
  id: ID!
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createMovedDraftPosts(input: CreateMovedDraftPostsInput!, condition: ModelMovedDraftPostsConditionInput): movedDraftPosts
  updateMovedDraftPosts(input: UpdateMovedDraftPostsInput!, condition: ModelMovedDraftPostsConditionInput): movedDraftPosts
  deleteMovedDraftPosts(input: DeleteMovedDraftPostsInput!, condition: ModelMovedDraftPostsConditionInput): movedDraftPosts
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createLikes(input: CreateLikesInput!, condition: ModelLikesConditionInput): Likes
  updateLikes(input: UpdateLikesInput!, condition: ModelLikesConditionInput): Likes
  deleteLikes(input: DeleteLikesInput!, condition: ModelLikesConditionInput): Likes
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createEnquiry(input: CreateEnquiryInput!, condition: ModelEnquiryConditionInput): Enquiry
  updateEnquiry(input: UpdateEnquiryInput!, condition: ModelEnquiryConditionInput): Enquiry
  deleteEnquiry(input: DeleteEnquiryInput!, condition: ModelEnquiryConditionInput): Enquiry
  createSavedPost(input: CreateSavedPostInput!, condition: ModelSavedPostConditionInput): SavedPost
  updateSavedPost(input: UpdateSavedPostInput!, condition: ModelSavedPostConditionInput): SavedPost
  deleteSavedPost(input: DeleteSavedPostInput!, condition: ModelSavedPostConditionInput): SavedPost
  createFollow(input: CreateFollowInput!, condition: ModelFollowConditionInput): Follow
  updateFollow(input: UpdateFollowInput!, condition: ModelFollowConditionInput): Follow
  deleteFollow(input: DeleteFollowInput!, condition: ModelFollowConditionInput): Follow
  createCategory(input: CreateCategoryInput!, condition: ModelCategoryConditionInput): Category
  updateCategory(input: UpdateCategoryInput!, condition: ModelCategoryConditionInput): Category
  deleteCategory(input: DeleteCategoryInput!, condition: ModelCategoryConditionInput): Category
  createPostDrafts(input: CreatePostDraftsInput!, condition: ModelPostDraftsConditionInput): PostDrafts
  updatePostDrafts(input: UpdatePostDraftsInput!, condition: ModelPostDraftsConditionInput): PostDrafts
  deletePostDrafts(input: DeletePostDraftsInput!, condition: ModelPostDraftsConditionInput): PostDrafts
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  s3Url: ModelSubscriptionStringInput
  thumbnailUrl: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  likesCount: ModelSubscriptionIntInput
  commentsCount: ModelSubscriptionIntInput
  sortByDate: ModelSubscriptionStringInput
  trending: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  postLikesId: ModelSubscriptionIDInput
  postEnquiryId: ModelSubscriptionIDInput
  postSavedPostId: ModelSubscriptionIDInput
  postCategoryId: ModelSubscriptionIDInput
  postPostedById: ModelSubscriptionIDInput
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["deletePost"])
  onCreateMovedDraftPosts(filter: ModelSubscriptionMovedDraftPostsFilterInput): movedDraftPosts @aws_subscribe(mutations: ["createMovedDraftPosts"])
  onUpdateMovedDraftPosts(filter: ModelSubscriptionMovedDraftPostsFilterInput): movedDraftPosts @aws_subscribe(mutations: ["updateMovedDraftPosts"])
  onDeleteMovedDraftPosts(filter: ModelSubscriptionMovedDraftPostsFilterInput): movedDraftPosts @aws_subscribe(mutations: ["deleteMovedDraftPosts"])
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateLikes(filter: ModelSubscriptionLikesFilterInput): Likes @aws_subscribe(mutations: ["createLikes"])
  onUpdateLikes(filter: ModelSubscriptionLikesFilterInput): Likes @aws_subscribe(mutations: ["updateLikes"])
  onDeleteLikes(filter: ModelSubscriptionLikesFilterInput): Likes @aws_subscribe(mutations: ["deleteLikes"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateEnquiry(filter: ModelSubscriptionEnquiryFilterInput): Enquiry @aws_subscribe(mutations: ["createEnquiry"])
  onUpdateEnquiry(filter: ModelSubscriptionEnquiryFilterInput): Enquiry @aws_subscribe(mutations: ["updateEnquiry"])
  onDeleteEnquiry(filter: ModelSubscriptionEnquiryFilterInput): Enquiry @aws_subscribe(mutations: ["deleteEnquiry"])
  onCreateSavedPost(filter: ModelSubscriptionSavedPostFilterInput): SavedPost @aws_subscribe(mutations: ["createSavedPost"])
  onUpdateSavedPost(filter: ModelSubscriptionSavedPostFilterInput): SavedPost @aws_subscribe(mutations: ["updateSavedPost"])
  onDeleteSavedPost(filter: ModelSubscriptionSavedPostFilterInput): SavedPost @aws_subscribe(mutations: ["deleteSavedPost"])
  onCreateFollow(filter: ModelSubscriptionFollowFilterInput): Follow @aws_subscribe(mutations: ["createFollow"])
  onUpdateFollow(filter: ModelSubscriptionFollowFilterInput): Follow @aws_subscribe(mutations: ["updateFollow"])
  onDeleteFollow(filter: ModelSubscriptionFollowFilterInput): Follow @aws_subscribe(mutations: ["deleteFollow"])
  onCreateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["createCategory"])
  onUpdateCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["updateCategory"])
  onDeleteCategory(filter: ModelSubscriptionCategoryFilterInput): Category @aws_subscribe(mutations: ["deleteCategory"])
  onCreatePostDrafts(filter: ModelSubscriptionPostDraftsFilterInput): PostDrafts @aws_subscribe(mutations: ["createPostDrafts"])
  onUpdatePostDrafts(filter: ModelSubscriptionPostDraftsFilterInput): PostDrafts @aws_subscribe(mutations: ["updatePostDrafts"])
  onDeletePostDrafts(filter: ModelSubscriptionPostDraftsFilterInput): PostDrafts @aws_subscribe(mutations: ["deletePostDrafts"])
}

type ModelMovedDraftPostsConnection {
  items: [movedDraftPosts]!
  nextToken: String
}

input ModelMovedDraftPostsFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  s3Url: ModelStringInput
  thumbnailUrl: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  likesCount: ModelIntInput
  commentsCount: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMovedDraftPostsFilterInput]
  or: [ModelMovedDraftPostsFilterInput]
  not: ModelMovedDraftPostsFilterInput
  movedDraftPostsCategoryId: ModelIDInput
  movedDraftPostsPostedById: ModelIDInput
}

input ModelMovedDraftPostsConditionInput {
  title: ModelStringInput
  s3Url: ModelStringInput
  thumbnailUrl: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  likesCount: ModelIntInput
  commentsCount: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMovedDraftPostsConditionInput]
  or: [ModelMovedDraftPostsConditionInput]
  not: ModelMovedDraftPostsConditionInput
  movedDraftPostsCategoryId: ModelIDInput
  movedDraftPostsPostedById: ModelIDInput
}

input CreateMovedDraftPostsInput {
  id: ID
  title: String!
  s3Url: [String!]!
  thumbnailUrl: String!
  description: String!
  tags: [String!]
  likesCount: Int!
  commentsCount: Int!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  movedDraftPostsCategoryId: ID
  movedDraftPostsPostedById: ID
}

input UpdateMovedDraftPostsInput {
  id: ID!
  title: String
  s3Url: [String!]
  thumbnailUrl: String
  description: String
  tags: [String!]
  likesCount: Int
  commentsCount: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  movedDraftPostsCategoryId: ID
  movedDraftPostsPostedById: ID
}

input DeleteMovedDraftPostsInput {
  id: ID!
}

input ModelSubscriptionMovedDraftPostsFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  s3Url: ModelSubscriptionStringInput
  thumbnailUrl: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  likesCount: ModelSubscriptionIntInput
  commentsCount: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionMovedDraftPostsFilterInput]
  or: [ModelSubscriptionMovedDraftPostsFilterInput]
  movedDraftPostsLikesId: ModelSubscriptionIDInput
  movedDraftPostsCategoryId: ModelSubscriptionIDInput
  movedDraftPostsPostedById: ModelSubscriptionIDInput
}

type ModelCommentConnection {
  items: [Comment]!
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  postID: ModelIDInput
  content: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
  userCommentedPostsId: ModelIDInput
  commentPostId: ModelIDInput
  commentCommentedById: ModelIDInput
}

input ModelCommentConditionInput {
  postID: ModelIDInput
  content: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
  userCommentedPostsId: ModelIDInput
  commentPostId: ModelIDInput
  commentCommentedById: ModelIDInput
}

input CreateCommentInput {
  id: ID
  postID: ID!
  content: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userCommentedPostsId: ID
  commentPostId: ID!
  commentCommentedById: ID!
}

input UpdateCommentInput {
  id: ID!
  postID: ID
  content: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userCommentedPostsId: ID
  commentPostId: ID
  commentCommentedById: ID
}

input DeleteCommentInput {
  id: ID!
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  postID: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
  commentPostId: ModelSubscriptionIDInput
  commentCommentedById: ModelSubscriptionIDInput
}

type ModelLikesConnection {
  items: [Likes]!
  nextToken: String
}

input ModelLikesFilterInput {
  id: ModelIDInput
  sortByDate: ModelStringInput
  Liked: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelLikesFilterInput]
  or: [ModelLikesFilterInput]
  not: ModelLikesFilterInput
  postLikesId: ModelIDInput
  movedDraftPostsLikesId: ModelIDInput
  userLikedPostsId: ModelIDInput
  likesPostedById: ModelIDInput
  likesLikedById: ModelIDInput
}

input ModelLikesConditionInput {
  sortByDate: ModelStringInput
  Liked: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelLikesConditionInput]
  or: [ModelLikesConditionInput]
  not: ModelLikesConditionInput
  postLikesId: ModelIDInput
  movedDraftPostsLikesId: ModelIDInput
  userLikedPostsId: ModelIDInput
  likesPostedById: ModelIDInput
  likesLikedById: ModelIDInput
}

input CreateLikesInput {
  id: ID
  sortByDate: String!
  Liked: Boolean!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postLikesId: ID
  movedDraftPostsLikesId: ID
  userLikedPostsId: ID
  likesPostedById: ID!
  likesLikedById: ID!
}

input UpdateLikesInput {
  id: ID!
  sortByDate: String
  Liked: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postLikesId: ID
  movedDraftPostsLikesId: ID
  userLikedPostsId: ID
  likesPostedById: ID
  likesLikedById: ID
}

input DeleteLikesInput {
  id: ID!
}

input ModelSubscriptionLikesFilterInput {
  id: ModelSubscriptionIDInput
  sortByDate: ModelSubscriptionStringInput
  Liked: ModelSubscriptionBooleanInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionLikesFilterInput]
  or: [ModelSubscriptionLikesFilterInput]
  likesPostedById: ModelSubscriptionIDInput
  likesLikedById: ModelSubscriptionIDInput
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  cognitoId: ModelStringInput
  image: ModelStringInput
  city: ModelStringInput
  country: ModelStringInput
  website: ModelStringInput
  company: ModelStringInput
  jobTitle: ModelStringInput
  experience: ModelIntInput
  role: ModelStringInput
  bio: ModelStringInput
  socialMediaProfiles: ModelStringInput
  followingCount: ModelIntInput
  followersCount: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  cognitoId: ModelStringInput
  image: ModelStringInput
  city: ModelStringInput
  country: ModelStringInput
  website: ModelStringInput
  company: ModelStringInput
  jobTitle: ModelStringInput
  experience: ModelIntInput
  role: ModelStringInput
  bio: ModelStringInput
  socialMediaProfiles: ModelStringInput
  followingCount: ModelIntInput
  followersCount: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  firstName: String!
  lastName: String
  email: AWSEmail!
  phone: String
  cognitoId: String!
  image: String
  city: String
  country: String
  website: String
  company: String
  jobTitle: String
  experience: Int
  role: String!
  bio: String
  socialMediaProfiles: String
  followingCount: Int
  followersCount: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  phone: String
  cognitoId: String
  image: String
  city: String
  country: String
  website: String
  company: String
  jobTitle: String
  experience: Int
  role: String
  bio: String
  socialMediaProfiles: String
  followingCount: Int
  followersCount: Int
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteUserInput {
  id: ID!
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  firstName: ModelSubscriptionStringInput
  lastName: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  phone: ModelSubscriptionStringInput
  cognitoId: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  city: ModelSubscriptionStringInput
  country: ModelSubscriptionStringInput
  website: ModelSubscriptionStringInput
  company: ModelSubscriptionStringInput
  jobTitle: ModelSubscriptionStringInput
  experience: ModelSubscriptionIntInput
  role: ModelSubscriptionStringInput
  bio: ModelSubscriptionStringInput
  socialMediaProfiles: ModelSubscriptionStringInput
  followingCount: ModelSubscriptionIntInput
  followersCount: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
  userLikedPostsId: ModelSubscriptionIDInput
  userSavedPostsId: ModelSubscriptionIDInput
  userCommentedPostsId: ModelSubscriptionIDInput
}

type ModelEnquiryConnection {
  items: [Enquiry]!
  nextToken: String
}

input ModelEnquiryFilterInput {
  id: ModelIDInput
  message: ModelStringInput
  hireInterest: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelEnquiryFilterInput]
  or: [ModelEnquiryFilterInput]
  not: ModelEnquiryFilterInput
  postEnquiryId: ModelIDInput
  enquiryEnquiredByIdId: ModelIDInput
}

input ModelEnquiryConditionInput {
  message: ModelStringInput
  hireInterest: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelEnquiryConditionInput]
  or: [ModelEnquiryConditionInput]
  not: ModelEnquiryConditionInput
  postEnquiryId: ModelIDInput
  enquiryEnquiredByIdId: ModelIDInput
}

input CreateEnquiryInput {
  id: ID
  message: String!
  hireInterest: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postEnquiryId: ID
  enquiryEnquiredByIdId: ID!
}

input UpdateEnquiryInput {
  id: ID!
  message: String
  hireInterest: Boolean
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postEnquiryId: ID
  enquiryEnquiredByIdId: ID
}

input DeleteEnquiryInput {
  id: ID!
}

input ModelSubscriptionEnquiryFilterInput {
  id: ModelSubscriptionIDInput
  message: ModelSubscriptionStringInput
  hireInterest: ModelSubscriptionBooleanInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionEnquiryFilterInput]
  or: [ModelSubscriptionEnquiryFilterInput]
  enquiryEnquiredByIdId: ModelSubscriptionIDInput
}

type ModelSavedPostConnection {
  items: [SavedPost]!
  nextToken: String
}

input ModelSavedPostFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelSavedPostFilterInput]
  or: [ModelSavedPostFilterInput]
  not: ModelSavedPostFilterInput
  postSavedPostId: ModelIDInput
  savedPostSavedById: ModelIDInput
}

input ModelSavedPostConditionInput {
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelSavedPostConditionInput]
  or: [ModelSavedPostConditionInput]
  not: ModelSavedPostConditionInput
  postSavedPostId: ModelIDInput
  savedPostSavedById: ModelIDInput
}

input CreateSavedPostInput {
  id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postSavedPostId: ID
  savedPostSavedById: ID!
}

input UpdateSavedPostInput {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postSavedPostId: ID
  savedPostSavedById: ID
}

input DeleteSavedPostInput {
  id: ID!
}

input ModelSubscriptionSavedPostFilterInput {
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionSavedPostFilterInput]
  or: [ModelSubscriptionSavedPostFilterInput]
  savedPostSavedById: ModelSubscriptionIDInput
}

type ModelFollowConnection {
  items: [Follow]!
  nextToken: String
}

input ModelFollowFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelFollowFilterInput]
  or: [ModelFollowFilterInput]
  not: ModelFollowFilterInput
  followFollowedById: ModelIDInput
  followFollowingId: ModelIDInput
}

input ModelFollowConditionInput {
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelFollowConditionInput]
  or: [ModelFollowConditionInput]
  not: ModelFollowConditionInput
  followFollowedById: ModelIDInput
  followFollowingId: ModelIDInput
}

input CreateFollowInput {
  id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  followFollowedById: ID!
  followFollowingId: ID!
}

input UpdateFollowInput {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  followFollowedById: ID
  followFollowingId: ID
}

input DeleteFollowInput {
  id: ID!
}

input ModelSubscriptionFollowFilterInput {
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionFollowFilterInput]
  or: [ModelSubscriptionFollowFilterInput]
  followFollowedById: ModelSubscriptionIDInput
  followFollowingId: ModelSubscriptionIDInput
}

type ModelCategoryConnection {
  items: [Category]!
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  image: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input ModelCategoryConditionInput {
  name: ModelStringInput
  image: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCategoryConditionInput]
  or: [ModelCategoryConditionInput]
  not: ModelCategoryConditionInput
}

input CreateCategoryInput {
  id: ID
  name: String!
  image: String
  description: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateCategoryInput {
  id: ID!
  name: String
  image: String
  description: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteCategoryInput {
  id: ID!
}

input ModelSubscriptionCategoryFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCategoryFilterInput]
  or: [ModelSubscriptionCategoryFilterInput]
}

type ModelPostDraftsConnection {
  items: [PostDrafts]!
  nextToken: String
}

input ModelPostDraftsFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  s3Url: ModelStringInput
  thumbnailUrl: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  sortByDate: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostDraftsFilterInput]
  or: [ModelPostDraftsFilterInput]
  not: ModelPostDraftsFilterInput
  postDraftsCategoryId: ModelIDInput
  postDraftsCreateById: ModelIDInput
}

input ModelPostDraftsConditionInput {
  title: ModelStringInput
  s3Url: ModelStringInput
  thumbnailUrl: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  sortByDate: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostDraftsConditionInput]
  or: [ModelPostDraftsConditionInput]
  not: ModelPostDraftsConditionInput
  postDraftsCategoryId: ModelIDInput
  postDraftsCreateById: ModelIDInput
}

input CreatePostDraftsInput {
  id: ID
  title: String!
  s3Url: [String]
  thumbnailUrl: String!
  description: String
  tags: [String!]
  sortByDate: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postDraftsCategoryId: ID!
  postDraftsCreateById: ID!
}

input UpdatePostDraftsInput {
  id: ID!
  title: String
  s3Url: [String]
  thumbnailUrl: String
  description: String
  tags: [String!]
  sortByDate: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  postDraftsCategoryId: ID
  postDraftsCreateById: ID
}

input DeletePostDraftsInput {
  id: ID!
}

input ModelSubscriptionPostDraftsFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  s3Url: ModelSubscriptionStringInput
  thumbnailUrl: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  sortByDate: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostDraftsFilterInput]
  or: [ModelSubscriptionPostDraftsFilterInput]
  postDraftsCategoryId: ModelSubscriptionIDInput
  postDraftsCreateById: ModelSubscriptionIDInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

input ModelIntKeyConditionInput {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}
